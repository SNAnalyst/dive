(function(){var root=this;var dive,$self;if(typeof exports!=="undefined"){$self=dive=exports}else{$self=dive=root.dive||{}}$self.VERSION="0.1.1";$self.liquidSamples={fresh:{density:function(){return $self.density(1e3,1)}},salt:{density:function(){return $self.density(1030,1)}},mercury:{density:function(){return $self.density(13595.1,1)}}};$self.gravitySamples={earth:9.80665,_current:9.80665,current:function(_value){if(typeof _value=="number"){$self.gravitySamples._current=_value}return $self.gravitySamples._current}};$self.surfacePressureSamples={earth:1,_current:1,current:function(_value){if(typeof _value=="number"){$self.surfacePressureSamples._current=_value}return $self.surfacePressureSamples._current}};$self.constants={vapourPressure:{water:{tempRange_1_100:[8.07131,1730.63,233.426],tempRange_99_374:[8.14019,1810.94,244,485]},lungsBreathing:{_current:null,current:function(){if(!$self.constants.vapourPressure.lungsBreathing._current){var value=$self.waterVapourPressureInBars(35.2);$self.constants.vapourPressure.lungsBreathing._current=value}return $self.constants.vapourPressure.lungsBreathing._current}}},altitudePressure:{sealevel:1,_current:1,current:function(_value){if(typeof _value=="number"){$self.constants.altitudePressure._current=_value}return $self.constants.altitudePressure._current}}};$self.feetToMeters=function(feet){if(!feet)return.3048;return feet*.3048};$self.metersToFeet=function(meters){if(!meters)return 3.28084;return meters*3.28084};$self.mmHgToPascal=function(mmHg){if(!mmHg){mmHg=1}return $self.liquidSamples.mercury.density()/1e3*$self.gravitySamples.current()*mmHg};$self.pascalToBar=function(pascals){return pascals/($self.surfacePressureSamples.current()*1e5)};$self.barToPascal=function(bars){if(!bars){bars=1}return bars*($self.surfacePressureSamples.current()*1e5)};$self.atmToBar=function(atm){var pascals=$self.atmToPascal(atm);return $self.pascalToBar(pascals)};$self.atmToPascal=function(atm){if(!atm){atm=1}return $self.surfacePressureSamples.current()*101325*atm};$self.pascalToAtm=function(pascal){return pascal/($self.surfacePressureSamples.current()*101325)};$self.density=function(weight,volume){return weight/volume};$self.depthInMetersToBars=function(depth,isFreshWater){var liquidDensity;if(isFreshWater){liquidDensity=$self.liquidSamples.fresh.density()}else{liquidDensity=$self.liquidSamples.salt.density()}var weightDensity=liquidDensity*$self.gravitySamples.current();return $self.pascalToBar(depth*weightDensity)+$self.constants.altitudePressure.current()};$self.depthInMetersToAtm=function(depth,isFreshWater){var liquidDensity;if(isFreshWater){liquidDensity=$self.liquidSamples.fresh.density()}else{liquidDensity=$self.liquidSamples.salt.density()}var weightDensity=liquidDensity*$self.gravitySamples.current();return $self.pascalToAtm(depth*weightDensity)+$self.constants.altitudePressure.current()};$self.barToDepthInMeters=function(bars,isFreshWater){var liquidDensity;if(isFreshWater){liquidDensity=$self.liquidSamples.fresh.density()}else{liquidDensity=$self.liquidSamples.salt.density()}if(!bars){bars=1}bars=bars-$self.constants.altitudePressure.current();var weightDensity=liquidDensity*$self.gravitySamples.current();var pressure=$self.barToPascal(bars);return pressure/weightDensity};$self.atmToDepthInMeters=function(atm,isFreshWater){var liquidDensity;if(isFreshWater){liquidDensity=$self.liquidSamples.fresh.density()}else{liquidDensity=$self.liquidSamples.salt.density()}if(!atm){atm=1}var weightDensity=liquidDensity*$self.gravitySamples.current();var pressure=$self.atmToPascal(atm);return pressure/weightDensity};$self.dac=function(psiIn,psiOut,runTime){return(psiIn-psiOut)/runTime};$self.sac=function(dac,avgDepth,isFreshWater){var depthToOneATM=$self.atmToDepthInMeters(1,isFreshWater);return dac/(avgDepth/depthToOneATM+1)};$self.rmv=function(sac,tankVolume,workingTankPsi){var tankConversionFactor=tankVolume/workingTankPsi;return sac*tankConversionFactor};$self.partialPressure=function(absPressure,volumeFraction){return absPressure*volumeFraction};$self.partialPressureAtDepth=function(depth,volumeFraction,isFreshWater){var p=$self.depthInMetersToBars(depth,isFreshWater);return p*volumeFraction};$self.waterVapourPressure=function(degreesCelcius){var rangeConstants;if(degreesCelcius>=1&&degreesCelcius<=100)rangeConstants=$self.constants.vapourPressure.water.tempRange_1_100;else if(degreesCelcius>=99&&degreesCelcius<=374)rangeConstants=$self.constants.vapourPressure.water.tempRange_99_374;else return NaN;var logp=rangeConstants[0]-rangeConstants[1]/(rangeConstants[2]+degreesCelcius);return Math.pow(10,logp)};$self.waterVapourPressureInBars=function(degreesCelcius){var mmHg=$self.waterVapourPressure(degreesCelcius);var pascals=$self.mmHgToPascal(mmHg);return $self.pascalToBar(pascals)};$self.depthChangeInBarsPerMinute=function(beginDepth,endDepth,time,isFreshWater){var speed=(endDepth-beginDepth)/time;return $self.depthInMetersToBars(speed,isFreshWater)-$self.constants.altitudePressure.current()};$self.gasRateInBarsPerMinute=function(beginDepth,endDepth,time,fGas,isFreshWater){return Math.abs($self.depthChangeInBarsPerMinute(beginDepth,endDepth,time,isFreshWater))*fGas};$self.gasPressureBreathingInBars=function(depth,fGas,isFreshWater){var bars=$self.depthInMetersToBars(depth,isFreshWater);return bars*fGas};$self.instantaneousEquation=function(pBegin,pGas,time,halfTime){var slopeLoad=this.schreinerEquation(pBegin,pGas,time,halfTime,0);return slopeLoad};$self.schreinerEquation=function(pBegin,pGas,time,halfTime,gasRate){var timeConstant=Math.log(2)/halfTime;return pGas+gasRate*(time-1/timeConstant)-(pGas-pBegin-gasRate/timeConstant)*Math.exp(-timeConstant*time)};$self.gas=function(fO2,fHe){var gas={};gas.fO2=fO2;gas.fHe=fHe;gas.fN2=1-(gas.fO2+gas.fHe);gas.modInMeters=function(ppO2,isFreshWater){return $self.barToDepthInMeters(ppO2/this.fO2,isFreshWater)};gas.endInMeters=function(depth,isFreshWater){var narcIndex=this.fO2+this.fN2;var bars=$self.depthInMetersToBars(depth,isFreshWater);var equivalentBars=bars*narcIndex;return $self.barToDepthInMeters(equivalentBars,isFreshWater)};gas.eadInMeters=function(depth,isFreshWater){var narcIndex=this.fO2+this.fN2;var bars=$self.depthInMetersToBars(depth,isFreshWater);var equivalentBars=bars/narcIndex;return $self.barToDepthInMeters(equivalentBars,isFreshWater)};return gas};$self.segment=function(startDepth,endDepth,gasName,time){var segment={};segment.gasName=gasName;segment.startDepth=startDepth;segment.endDepth=endDepth;segment.time=time;return segment};$self.collapseSegments=function(segments){var collapsed=true;while(collapsed){collapsed=false;for(var i=0;i<segments.length-1;i++){var segment1=segments[i];var segment2=segments[i+1];if(segment1.startDepth==segment1.endDepth&&segment2.startDepth==segment2.endDepth&&segment1.endDepth==segment2.startDepth&&segment1.gasName==segment2.gasName){segment1.time=segment1.time+segment2.time;segments.splice(i+1,1);collapsed=true;break}}}return segments}}).call(this);(function(){var root=this;var dive,$self;if(typeof exports!=="undefined"){dive=exports}else{dive=root.dive||{}}$self=dive.deco=dive.deco||{};$self.buhlmann=function(){var algorithm={};algorithm.ZH16ATissues=[[4,1.2599,.505,1.51,1.7424,.4245],[5,1.2599,.505,1.88,1.6189,.477],[8,1,.6514,3.02,1.383,.5747],[12.5,.8618,.7222,4.72,1.1919,.6527],[18.5,.7562,.7725,6.99,1.0458,.7223],[27,.6667,.8125,10.21,.922,.7582],[38.3,.5933,.8434,14.48,.8205,.7957],[54.3,.5282,.8693,20.53,.7305,.8279],[77,.4701,.891,29.11,.6502,.8553],[109,.4187,.9092,41.2,.595,.8757],[146,.3798,.9222,55.19,.5545,.8903],[187,.3497,.9319,70.69,.5333,.8997],[239,.3223,.9403,90.34,.5189,.9073],[305,.2971,.9477,115.29,.5181,.9122],[390,.2737,.9544,147.42,.5176,.9171],[498,.2523,.9602,188.24,.5172,.9217],[635,.2327,.9653,240.03,.5119,.9267]];algorithm.ZH16BTissues=[[4,1.2599,.505,1.51,1.7424,.4245],[5,1.2599,.505,1.88,1.6189,.477],[8,1,.6514,3.02,1.383,.5747],[12.5,.8618,.7222,4.72,1.1919,.6527],[18.5,.7562,.7725,6.99,1.0458,.7223],[27,.6667,.8125,10.21,.922,.7582],[38.3,.56,.8434,14.48,.8205,.7957],[54.3,.4947,.8693,20.53,.7305,.8279],[77,.45,.891,29.11,.6502,.8553],[109,.4187,.9092,41.2,.595,.8757],[146,.3798,.9222,55.19,.5545,.8903],[187,.3497,.9319,70.69,.5333,.8997],[239,.3223,.9403,90.34,.5189,.9073],[305,.2971,.9477,115.29,.5181,.9122],[390,.2737,.9544,147.42,.5176,.9171],[498,.2523,.9602,188.24,.5172,.9217],[635,.2327,.9653,240.03,.5119,.9267]];algorithm.ZH16CTissues=[[4,1.2599,.505,1.51,1.7424,.4245],[5,1.2599,.505,1.88,1.6189,.477],[8,1,.6514,3.02,1.383,.5747],[12.5,.8618,.7222,4.72,1.1919,.6527],[18.5,.7562,.7725,6.99,1.0458,.7223],[27,.62,.8125,10.21,.922,.7582],[38.3,.5043,.8434,14.48,.8205,.7957],[54.3,.441,.8693,20.53,.7305,.8279],[77,.4,.891,29.11,.6502,.8553],[109,.375,.9092,41.2,.595,.8757],[146,.35,.9222,55.19,.5545,.8903],[187,.3295,.9319,70.69,.5333,.8997],[239,.3065,.9403,90.34,.5189,.9073],[305,.2835,.9477,115.29,.5181,.9122],[390,.261,.9544,147.42,.5176,.9171],[498,.248,.9602,188.24,.5172,.9217],[635,.2327,.9653,240.03,.5119,.9267]];function buhlmannTissue(halfTimes,absPressure,isFreshWater){this.halfTimes=halfTimes;this.isFreshWater=isFreshWater||false;this.waterVapourPressure=dive.waterVapourPressureInBars(35.2);this.absPressure=absPressure||1;this.pNitrogen=dive.partialPressure(absPressure||1,.79)-this.waterVapourPressure;this.pHelium=0;this.pTotal=this.pNitrogen+this.pHelium;this.ceiling=0}buhlmannTissue.prototype.N2HalfTime=function(){return this.halfTimes[0]};buhlmannTissue.prototype.N2AValue=function(){return this.halfTimes[1]};buhlmannTissue.prototype.N2BValue=function(){return this.halfTimes[2]};buhlmannTissue.prototype.HeHalfTime=function(){return this.halfTimes[3]};buhlmannTissue.prototype.HeAValue=function(){return this.halfTimes[4]};buhlmannTissue.prototype.HeBValue=function(){return this.halfTimes[5]};buhlmannTissue.prototype.addFlat=function(depth,fO2,fHe,time){this.addDepthChange(depth,depth,fO2,fHe,time)};buhlmannTissue.prototype.addDepthChange=function(startDepth,endDepth,fO2,fHe,time){var fN2=1-fO2-fHe;var gasRate=dive.gasRateInBarsPerMinute(startDepth,endDepth,time,fN2,this.isFreshWater);var halfTime=this.N2HalfTime();var pGas=dive.gasPressureBreathingInBars(endDepth,fN2,this.isFreshWater);var pBegin=this.pNitrogen;this.pNitrogen=dive.schreinerEquation(pBegin,pGas,time,halfTime,gasRate);gasRate=dive.gasRateInBarsPerMinute(startDepth,endDepth,time,fHe,this.isFreshWater);halfTime=this.HeHalfTime();pGas=dive.gasPressureBreathingInBars(endDepth,fHe,this.isFreshWater);pBegin=this.pHelium;this.pHelium=dive.schreinerEquation(pBegin,pGas,time,halfTime,gasRate);var prevTotal=this.pTotal;this.pTotal=this.pNitrogen+this.pHelium;return this.pTotal-prevTotal};buhlmannTissue.prototype.calculateCeiling=function(gf){gf=gf||1;var a=(this.N2AValue()*this.pNitrogen+this.HeAValue()*this.pHelium)/this.pTotal;var b=(this.N2BValue()*this.pNitrogen+this.HeBValue()*this.pHelium)/this.pTotal;var bars=(this.pTotal-a*gf)/(gf/b+1-gf);this.ceiling=dive.barToDepthInMeters(bars,this.isFreshWater);return Math.round(this.ceiling)};function plan(buhlmannTable,absPressure,isFreshWater){this.table=buhlmannTable;this.isFreshWater=isFreshWater;this.tissues=[];for(var i=0;i<this.table.length;i++){this.tissues[i]=new buhlmannTissue(this.table[i],absPressure,isFreshWater)}this.bottomGasses={};this.decoGasses={};this.segments=[]}plan.prototype.addBottomGas=function(gasName,fO2,fHe){this.bottomGasses[gasName]=dive.gas(fO2,fHe)};plan.prototype.addDecoGas=function(gasName,fO2,fHe){this.decoGasses[gasName]=dive.gas(fO2,fHe)};plan.prototype.addFlat=function(depth,gasName,time){return this.addDepthChange(depth,depth,gasName,time)};plan.prototype.addDepthChange=function(startDepth,endDepth,gasName,time){var gas=this.bottomGasses[gasName]||this.decoGasses[gasName];if(typeof gas=="undefined"){throw"Gasname must only be one of registered gasses. Please use plan.addBottomGas or plan.addDecoGas to register a gas."}var fO2=gas.fO2;var fHe=gas.fHe;this.segments.push(dive.segment(startDepth,endDepth,gasName,time));var loadChange=0;for(var i=0;i<this.tissues.length;i++){var tissueChange=this.tissues[i].addDepthChange(startDepth,endDepth,fO2,fHe,time);loadChange=loadChange+tissueChange}return loadChange};plan.prototype.getCeiling=function(gf){gf=gf||1;var ceiling=0;for(var i=0;i<this.tissues.length;i++){var tissueCeiling=this.tissues[i].calculateCeiling(gf);if(!ceiling||tissueCeiling>ceiling){ceiling=tissueCeiling}}while(ceiling%3!=0){ceiling++}return ceiling};plan.prototype.resetTissues=function(origTissuesJSON){var originalTissues=JSON.parse(origTissuesJSON);for(var i=0;i<originalTissues.length;i++){for(var p in originalTissues[i]){this.tissues[i][p]=originalTissues[i][p]}}};plan.prototype.calculateDecompression=function(maintainTissues,gfLow,gfHigh,maxppO2,maxEND,fromDepth){maintainTissues=maintainTissues||false;gfLow=gfLow||1;gfHigh=gfHigh||1;maxppO2=maxppO2||1.6;maxEND=maxEND||30;var currentGasName;if(typeof fromDepth=="undefined"){if(this.segments.length==0){throw"No depth to decompress from has been specified, and neither have any dive stages been registered. Unable to decompress."}else{fromDepth=this.segments[this.segments.length-1].endDepth;currentGasName=this.segments[this.segments.length-1].gasName}}var gfDiff=gfHigh-gfLow;var distanceToSurface=fromDepth;var gfChangePerMeter=gfDiff/distanceToSurface;if(!maintainTissues){var origTissues=JSON.stringify(this.tissues)}var ceiling=this.getCeiling(gfLow);currentGasName=this.addDecoDepthChange(fromDepth,ceiling,maxppO2,maxEND,currentGasName);while(ceiling>0){var currentDepth=ceiling;var nextDecoDepth=ceiling-3;var time=0;var gf=gfLow+gfChangePerMeter*(distanceToSurface-ceiling);while(ceiling>nextDecoDepth&&time<=1e4){this.addFlat(currentDepth,currentGasName,1);time++;ceiling=this.getCeiling(gf)}currentGasName=this.addDecoDepthChange(currentDepth,ceiling,maxppO2,maxEND,currentGasName)}if(!maintainTissues){this.resetTissues(origTissues)}return dive.collapseSegments(this.segments)};plan.prototype.addDecoDepthChange=function(fromDepth,toDepth,maxppO2,maxEND,currentGasName){if(typeof currentGasName=="undefined"){currentGasName=this.bestDecoGasName(fromDepth,maxppO2,maxEND);if(typeof currentGasName=="undefined"){throw"Unable to find starting gas to decompress at depth "+fromDepth+". No segments provided with bottom mix, and no deco gas operational at this depth."}}while(toDepth<fromDepth){var betterDecoGasName=this.bestDecoGasName(fromDepth,maxppO2,maxEND);if(typeof betterDecoGasName!="undefined"&&betterDecoGasName!=currentGasName){currentGasName=betterDecoGasName}var ceiling=toDepth;for(var nextDepth=fromDepth-1;nextDepth>=ceiling;nextDepth--){var nextDecoGasName=this.bestDecoGasName(nextDepth,maxppO2,maxEND);if(typeof nextDecoGasName!="undefined"&&nextDecoGasName!=currentGasName){ceiling=nextDepth;break}}var depthdiff=fromDepth-ceiling;var time=depthdiff/10;this.addDepthChange(fromDepth,ceiling,currentGasName,time);fromDepth=ceiling}var betterDecoGasName=this.bestDecoGasName(fromDepth,maxppO2,maxEND);if(typeof betterDecoGasName!="undefined"&&betterDecoGasName!=currentGasName){currentGasName=betterDecoGasName}return currentGasName};plan.prototype.bestDecoGasName=function(depth,maxppO2,maxEND){var winner;var winnerName;for(var gasName in this.decoGasses){var candidateGas=this.decoGasses[gasName];var mod=Math.round(candidateGas.modInMeters(maxppO2,this.isFreshWater));var end=Math.round(candidateGas.endInMeters(depth,this.isFreshWater));if(depth<=mod&&end<=maxEND){if(typeof winner=="undefined"||winner.fO2<candidateGas.fO2){winner=candidateGas;winnerName=gasName}}}return winnerName};plan.prototype.ndl=function(depth,gasName,gf){gf=gf||1;var ceiling=this.getCeiling(gf);var origTissues=JSON.stringify(this.tissues);var time=0;var change=1;while(ceiling<0&&change>0){change=this.addFlat(depth,gasName,gf);ceiling=this.getCeiling(gf);time++}this.resetTissues(origTissues);if(change==0){console.log("NDL is practially infinity. Returning largest number we know of.");return Math.POSITIVE_INFINITY}return time};algorithm.buhlmannTissue=buhlmannTissue;algorithm.plan=plan;return algorithm}}).call(this);